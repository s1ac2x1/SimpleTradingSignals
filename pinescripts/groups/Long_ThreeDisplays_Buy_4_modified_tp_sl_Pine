//@version=5
strategy("Buy 4", overlay=true, pyramiding=1, initial_capital = 10000, default_qty_type = strategy.percent_of_equity, default_qty_value = 10, commission_type = strategy.commission.cash_per_contract, commission_value = 0.005)

quoteGreen(c, o) => c >= o

// quotes
[screen_1_open, screen_1_high, screen_1_low, screen_1_close]  = request.security(syminfo.tickerid, 'W', [open, high, low, close], lookahead=barmerge.lookahead_on)
[screen_1_open_last, screen_1_high_last, screen_1_low_last, screen_1_close_last] = request.security(syminfo.tickerid, 'W', [open[1], high[1], low[1], close[1]], lookahead=barmerge.lookahead_on)
[screen_2_open, screen_2_high, screen_2_low, screen_2_close] = request.security(syminfo.tickerid, 'D', [open, high, low, close])

// indicators
screen_1_EMA26 = request.security(syminfo.tickerid, "W", ta.ema(close, 26), lookahead=barmerge.lookahead_on)
[screen_1_MACD, screen_1_MACDSignal, screen_1_MACDHistorgram] = request.security(syminfo.tickerid, "1W", ta.macd(close, 12, 26, 9), lookahead=barmerge.lookahead_on)
screen_2_EMA13 = request.security(syminfo.tickerid, "D", ta.ema(close, 13))
[screen_2_MACD, screen_2_MACDSignal, screen_2_MACDHistogram] = request.security(syminfo.tickerid, "D", ta.macd(close, 12, 26, 9))
screen_2_stoch_k = ta.stoch(close, high, low, 14)
screen_2_stoch_d = ta.sma(screen_2_stoch_k, 3)

currH = screen_1_MACDHistorgram
prevH = screen_1_MACDHistorgram
if (prevH == currH)
    prevH := screen_1_MACDHistorgram[1]
if (prevH == currH)
    prevH := screen_1_MACDHistorgram[2]
if (prevH == currH)
    prevH := screen_1_MACDHistorgram[2]
if (prevH == currH)
    prevH := screen_1_MACDHistorgram[3]
if (prevH == currH)
    prevH := screen_1_MACDHistorgram[4]

Long_ScreenOne_LastBarGreen = screen_1_open < screen_1_close
Long_ScreenOne_LastBarHigher = screen_1_low_last < screen_1_low and screen_1_high_last < screen_1_high
Long_ScreenOne_EMA_LastBarCrosses = screen_1_low <= screen_1_EMA26 and screen_1_high >= screen_1_EMA26
Long_ScreenOne_MACD_LastAscending = screen_1_MACDHistorgram > prevH

Long_ScreenTwo_Bars_TwoHighAscending = screen_2_high > screen_2_high[1]
screen_2_last_bar_above_EMA13 = screen_2_low > screen_2_EMA13 and screen_2_high > screen_2_EMA13
Long_ScreenTwo_EMA_LastBarNotAbove = not screen_2_last_bar_above_EMA13
Long_ScreenTwo_MACD_LastAscending = screen_2_MACDHistogram > screen_2_MACDHistogram[1]

Long_ScreenTwo_Stoch_D_K_LastAscending = screen_2_stoch_k > screen_2_stoch_k[1] and screen_2_stoch_d > screen_2_stoch_d[1]
[middleKC, upperKC, lowerKC] = request.security(syminfo.tickerid, 'D', ta.kc(close, 20, 2), lookahead=barmerge.lookahead_on)

lateEntry = close >= middleKC + (upperKC - middleKC) / 100 * 80

f_round(_val, _decimals) =>
    _p = math.pow(10, _decimals)
    math.round(math.abs(_val) * _p)/ _p * math.sign(_val)

currentscreen_1_EMA26 = request.security(syminfo.tickerid, "W", ta.ema(close, 26), lookahead=barmerge.lookahead_on)
prevscreen_1_EMA26 = request.security(syminfo.tickerid, "W", ta.ema(close, 26)[1], lookahead=barmerge.lookahead_on)

ascendingEMA26 = f_round(prevscreen_1_EMA26, 2) < f_round(currentscreen_1_EMA26, 2)
flatMovement = math.abs(f_round(prevscreen_1_EMA26, 2) - f_round(currentscreen_1_EMA26, 2)) <= 0.03

lastWeeklyQuoteGreen = screen_1_close > screen_1_open

Long_ScreenOne_SoftTrendCheck = ascendingEMA26 and lastWeeklyQuoteGreen

middleAfterKCMiddle = middleKC + (upperKC - middleKC) / 100 * 50

lastBarBelowMiddleTopKC = close <= middleAfterKCMiddle

longCondition = Long_ScreenOne_SoftTrendCheck and strategy.position_size == 0 and not lateEntry and Long_ScreenOne_LastBarGreen and Long_ScreenOne_MACD_LastAscending and Long_ScreenTwo_Bars_TwoHighAscending and Long_ScreenTwo_Stoch_D_K_LastAscending

// arrayToFindMin = array.new_float(size=10, initial_value=9999999)
// for offset = 0 to 65
//     array.insert(arrayToFindMin, offset, screen_2_low[offset])
// min = array.min(id=arrayToFindMin)
fixedSL_long = ta.valuewhen(longCondition, lowerKC, 0)

diff = upperKC - middleKC
ratio = diff / 100 * 90
fixedTP_long = ta.valuewhen(longCondition, low <= middleKC - (middleKC - lowerKC) / 100 * 50 ? middleKC + (upperKC - middleKC) / 100 * 30: middleKC + ratio, 0)

barIndexEntry = ta.valuewhen(longCondition, bar_index, 0)
entered = ta.valuewhen(longCondition, true, 0)

if (longCondition)
    strategy.entry("long", strategy.long)

if (bar_index - barIndexEntry > 1 and strategy.position_size > 0)
    strategy.exit(id = "exit", from_entry = "long", stop = fixedSL_long, limit = fixedTP_long, comment_profit = "Profit", comment_loss = "Loss")

// float lastTradeProfit = na
// if strategy.position_size != strategy.position_size[1]
//     lastTradeProfit := strategy.netprofit - strategy.netprofit[1]
// plot(lastTradeProfit, style = plot.style_columns, color = lastTradeProfit > 0 ? color.green : lastTradeProfit == 0 ? color.gray : color.red, title = "Trade profit/loss")

//plot(strategy.netprofit)